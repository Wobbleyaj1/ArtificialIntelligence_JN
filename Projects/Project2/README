Functions:


main():
        Prints an overview of the rules of the Game of Life.
        Prompts the user to specify the number of generations to simulate.
        Parses command-line arguments to handle file input.
        Generates a random map or reads the map from an input file.
        Prints the initial map
        Simulates the specified number of generations, printing the evolution of the colony after each generation.

read_file_input(file_path): This function reads the input file and returns a two-dimensional list representing the map.
	Parameters: 
	-file_path: A string representing the path to the input file.
	Returns:
	-A two-dimensional list representing the map.
	
generate_random_map(rows, cols): This function generates a random map of the specified dimensions.
	Parameters:
	-rows: An integer representing the number of rows in the map.
	-cols: An integer representing the number of columns in the map.
	Returns:
	-A two-dimensional list representing the random map.

apply_rules(current_state, num_neighbors): This function applies the rules of the Game of Life to determine the next state of a cell.
	Parameters:
	-current_state: A string representing the current state of the cell ('X' for alive, '0' for dead).
	-num_neighbors: An integer representing the number of neighboring cells that are alive.
	Returns:
	-A string representing the next state of the cell ('X' for alive, '0' for dead).

detect_neighboring_X(map_data): This function detects neighboring 'X's in the map and updates the map for the next generation according to the rules of the Game of Life.
	Parameters:
	-map_data: A two-dimensional list representing the current map.
	Returns:
	-neighboring_X: A list of tuples containing the coordinates of cells with 'X' and their neighboring 'X's.
	-next_generation_map: A two-dimensional list representing the map for the next generation.

