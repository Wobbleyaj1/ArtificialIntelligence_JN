Script started on Wed 24 Jan 2024 06:41:41 PM EST
]0;nipper_jj@cobra:~/CSC380/Labs/Lab3[?1034h[nipper_jj@cobra Lab3]$ at t[K[K[K[Kcat tictactoe.cpp
#include <iostream>
#include <unistd.h>
#include <string>
using namespace std;

enum Player {
        Human = -1,
        Blank = 0,
        Computer = 1
};

void printBoard(Player board[]);
void playGame(Player board[]);
bool ThreeInARow(Player board[], Player player);
bool Draw(Player board[]);
int Intelligence(Player board[]);

int main() {
        char play = 'Y';
        char choice = 'Y';

        while(play == 'Y') {
                Player board[9] = {Blank,Blank,Blank,Blank,Blank,Blank,Blank,Blank,Blank};

                //Choose who goes first
                
                cout << "Do you want to go first? (Y/N): ";
                cin >> choice;
                if (choice == 'Y') {
                        printBoard(board);
                        playGame(board);
                }
                else{
                        board[4] = Computer; //Computer always goes middle first
                        printBoard(board);
                        playGame(board);
                }
          
                cout << "Do you want to play again? (Y/N): ";
                cin >> play;
                cout << endl;
        }
        cout << "Thanks for playing!" << endl;
        return 0;
}

void printBoard(Player board[]) {
  
        cout << endl;
        for(int i = 0; i < 9; i++) {
                if((i == 2) || (i == 5) || (i == 8)) {
                        if(board[i] == -1)
                                cout << " X";
                        else if (board[i] == 1)
                                cout << " O";
                        else
                                cout << "  ";
                } else {
                        if(board[i] == -1)
                                cout << "  X |";
                        else if (board[i] == 1)
                                cout << "  O |";
                        else
                                cout << "    |";
                }
                if(((i+1)%3 == 0) && (i != 8)) {
                        cout << endl << "----|----|----" << endl;
                }
                if(i == 8)
                        cout << "\n" << endl;
        }

}

void playGame(Player board[]) {
        bool winner = false;
        int input;

        while(!winner){
                // Human move
                cout << "Your Move: ";
                cin >> input;
                Player human = Human;
                while (board[input - 1] != Blank){ //Check Valid Move
                        cout << "Invalid move.\nTry again: ";
                        cin >> input;
                }
                board[input - 1] = human;
                printBoard(board);
                cout << "\n";
                sleep(1);

                // Check for winner
                if(ThreeInARow(board, human)){
                        winner = true;
                        cout << "You win!" << endl;
                        return;
                }

                // Check for draw
                if (Draw(board)) {
                        winner = true;
                        cout << "It's a draw!" << endl;
                        return;
                }

                // Computer move
                Player computer = Computer;
                input = Intelligence(board);
                board[input] = computer;
                printBoard(board);

                // Check for winner
                if (ThreeInARow(board, computer)) {
                        winner = true;
                        cout << "Computer wins!" << endl;
                        return;
                }

                // Check for draw
                if (Draw(board)) {
                        winner = true;
                        cout << "It's a draw!" << endl;
                        return;
                }
        }
}

bool ThreeInARow (Player board[], Player player) {
    // Check rows
    if ((board[0] == player && board[1] == player && board[2] == player) ||
        (board[3] == player && board[4] == player && board[5] == player) ||
        (board[6] == player && board[7] == player && board[8] == player)) {
        return true;
    }

    // Check columns
    if ((board[0] == player && board[3] == player && board[6] == player) ||
        (board[1] == player && board[4] == player && board[7] == player) ||
        (board[2] == player && board[5] == player && board[8] == player)) {
        return true;
    }

    // Check diagonals
    if ((board[0] == player && board[4] == player && board[8] == player) ||
        (board[2] == player && board[4] == player && board[6] == player)) {
        return true;
    }

    // No win case found
    return false;
}

bool Draw(Player board[]) {
    for (int i = 1; i <= 9; ++i) {
        if (board[i - 1] == Blank) {
            return false;
        }
    }
    return true;
}

int Intelligence(Player board[]) {
        // Check for a winning move
        for (int i = 1; i <= 9; i++) {
                if (board[i - 1] == Blank) {
                        board[i - 1] = Computer;
                        if (ThreeInARow(board, Computer)) {
                                board[i - 1] = Blank; // Undo the move
                                return i - 1;
                        }
                        board[i - 1] = Blank; // Undo the move
                }
        }

        // Check for a blocking move
        for (int i = 1; i <= 9; i++) {
                if (board[i - 1] == Blank) {
                        board[i - 1] = Human;
                        if (ThreeInARow(board, Human)) {
                                board[i - 1] = Blank; // Undo the move
                                return i - 1;
                        }
                        board[i - 1] = Blank; // Undo the move
                }
        }
  
        // Prioritize the center, then corners, and finally edges
        if (board[4] == Blank) {
                return 4; // Center
        }

        // Corners
        int corners[4] = {0, 2, 6, 8};
        for (int i = 0; i < 4; i++) {
                if (board[corners[i]] == Blank) {
                        return corners[i];
                }
        }

        // Edges
        int edges[4] = {1, 3, 5, 7};
        for (int i = 0; i < 4; i++) {
                if (board[edges[i]] == Blank) {
                        return edges[i];
                }
        }
        return 0;
}
]0;nipper_jj@cobra:~/CSC380/Labs/Lab3[nipper_jj@cobra Lab3]$ c++ ticat[K[Ktactoe.cpp
]0;nipper_jj@cobra:~/CSC380/Labs/Lab3[nipper_jj@cobra Lab3]$ a[K./a.ot[Kut
Do you want to go first? (Y/N): Y

    |    |  
----|----|----
    |    |  
----|----|----
    |    |  

Your Move: 2

    |  X |  
----|----|----
    |    |  
----|----|----
    |    |  



    |  X |  
----|----|----
    |  O |  
----|----|----
    |    |  

Your Move: 1

  X |  X |  
----|----|----
    |  O |  
----|----|----
    |    |  



  X |  X | O
----|----|----
    |  O |  
----|----|----
    |    |  

Your Move: 7

  X |  X | O
----|----|----
    |  O |  
----|----|----
  X |    |  



  X |  X | O
----|----|----
  O |  O |  
----|----|----
  X |    |  

Your Move: 9

  X |  X | O
----|----|----
  O |  O |  
----|----|----
  X |    | X



  X |  X | O
----|----|----
  O |  O | O
----|----|----
  X |    | X

Computer wins!
Do you want to play again? (Y/N): Y

Do you want to go first? (Y/N): N

    |    |  
----|----|----
    |  O |  
----|----|----
    |    |  

Your Move: 1

  X |    |  
----|----|----
    |  O |  
----|----|----
    |    |  



  X |    | O
----|----|----
    |  O |  
----|----|----
    |    |  

Your Move: 7

  X |    | O
----|----|----
    |  O |  
----|----|----
  X |    |  



  X |    | O
----|----|----
  O |  O |  
----|----|----
  X |    |  

Your Move: 4 6 4
Invalid move.
Try again: 6

  X |    | O
----|----|----
  O |  O | X
----|----|----
  X |    |  



  X |    | O
----|----|----
  O |  O | X
----|----|----
  X |    | O

Your Move: 2

  X |  X | O
----|----|----
  O |  O | X
----|----|----
  X |    | O



  X |  X | O
----|----|----
  O |  O | X
----|----|----
  X |  O | O

It's a draw!
Do you want to play again? (Y/N): N

Thanks for playing!
]0;nipper_jj@cobra:~/CSC380/Labs/Lab3[nipper_jj@cobra Lab3]$ exit
exit

Script done on Wed 24 Jan 2024 06:44:40 PM EST
